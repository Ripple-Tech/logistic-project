// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
 }

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String? 
  email         String?   @unique
  emailVerified DateTime?
  verifiedUser  DateTime?
  image         String?
  password      String?
  orders        Order[]
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
   status         String   @default("Preparing") 
  deliveryStatus String   @default("Preparing")
  createDate     DateTime @default(now())
  progress       Int      @default(20) // progress level 0-100%
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recieptId      String?  @unique @db.ObjectId
  reciept        Reciept? @relation(fields: [recieptId], references: [id])

  timeline       OrderTimeline[]
}

model Reciept {
  id   String   @id @default(auto()) @map("_id") @db.ObjectId
  shippername String
  typeofpackage String
  recievername String
  createdAt DateTime @default(now())
 // orders        Order[]
  shipperaddress  String
  recieveraddress String
  waybilnumber String
  weight  String
  shipperphonumb String
  recieverphonumb String
  quantity  String
  shipperemail String
  recieveremail String
  itemdescription String
  totalcharges String
  modeoftransport String
  modeofpayment String
  departuredate String
  estdeliverytime String
  longitude String
  latitude String
  order             Order?
 }
 

model OrderTimeline {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  text      String
  createDate DateTime @default(now())

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}


type CartProductType{
    id String
    name String
    quantity Int
    price Float
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String
  token String @unique
  expires DateTime
  @@unique([email, token])
}
model PasswordResetToken {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   email String
   token String @unique 
   expires DateTime 
  @@unique([email, token])
}

model TwoFactorToken {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   email String
   token String @unique 
   expires DateTime 
  @@unique([email, token])
}

model TwoFactorConfirmation {
 id String @id @default(auto()) @map("_id") @db.ObjectId

 userId String @db.ObjectId
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([userId])

}